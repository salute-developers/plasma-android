// AUTO-GENERATED. DO NOT MODIFY this file.
package com.sdds.playground.themebuilder.tokens

import androidx.compose.runtime.Immutable
import androidx.compose.runtime.ProvidableCompositionLocal
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.compose.runtime.staticCompositionLocalOf
import androidx.compose.runtime.structuralEqualityPolicy
import androidx.compose.ui.graphics.Color
import com.sdds.playground.themebuilder.tokens.ColorOverrideScope
import com.sdds.playground.themebuilder.tokens.ThemeColors
import kotlin.String
import kotlin.Unit
import kotlin.collections.Map
import kotlin.collections.MutableMap

/**
 * Цвета Theme
 */
@Immutable
public class ThemeColors(
    private val colors: Map<String, Color>,
) {
    public var textPrimary: Color by mutableStateOf(colors["textPrimary"]!!,
            structuralEqualityPolicy())

    public var textTertiary: Color by mutableStateOf(colors["textTertiary"]!!,
            structuralEqualityPolicy())

    /**
     * Возвращает копию [ThemeColors]. Предоставляет возможность переопределять цвета.
     */
    public fun copy(overrideColors: ColorOverrideScope.() -> Unit = {}): ThemeColors {
        val colorOverrideScope = ColorOverrideScope()
        overrideColors.invoke(colorOverrideScope)
        val overrideMap = colorOverrideScope.overrideMap
        return ThemeColors(colors.mapValues { overrideMap[it.key] ?: it.value })
    }

    public override fun toString() =
            "${this::class.simpleName}(textPrimary=$textPrimary, textTertiary=$textTertiary)"
}

/**
 * Скоуп переопределения цветов
 */
public class ColorOverrideScope {
    private val _overrideMap: MutableMap<String, Color> = mutableMapOf<String, Color>()

    internal val overrideMap: Map<String, Color>
        get() = _overrideMap.toMap()

    public val textPrimary: String = "textPrimary"

    public val textTertiary: String = "textTertiary"

    public infix fun String.overrideBy(color: Color): Unit {
        _overrideMap[this] = color
    }
}

internal val LocalThemeColors: ProvidableCompositionLocal<ThemeColors> = staticCompositionLocalOf {
        lightThemeColors() }

internal fun ThemeColors.updateColorsFrom(other: ThemeColors): Unit {
    textPrimary = other.textPrimary
    textTertiary = other.textTertiary
}

private fun MutableMap<String, Color>.add(
    attribute: String,
    defaultTokenValue: Color,
    overwriteMap: Map<String, Color>,
): Unit {
    this[attribute] = overwriteMap[attribute] ?: defaultTokenValue
}

/**
 * Цвета [ThemeColors] для светлой темы
 */
public fun lightThemeColors(overrideColors: ColorOverrideScope.() -> Unit = {}): ThemeColors {
    val colorOverrideScope = ColorOverrideScope()
    overrideColors.invoke(colorOverrideScope)
    val overwrite = colorOverrideScope.overrideMap
    val initial = mutableMapOf<String, Color>()
    initial.add("textPrimary", LightColorTokens.TextPrimary, overwrite)
    initial.add("textTertiary", LightColorTokens.TextTertiary, overwrite)
    return ThemeColors(initial)
}

/**
 * Цвета [ThemeColors] для темной темы
 */
public fun darkThemeColors(overrideColors: ColorOverrideScope.() -> Unit = {}): ThemeColors {
    val colorOverrideScope = ColorOverrideScope()
    overrideColors.invoke(colorOverrideScope)
    val overwrite = colorOverrideScope.overrideMap
    val initial = mutableMapOf<String, Color>()
    initial.add("textPrimary", DarkColorTokens.TextPrimary, overwrite)
    initial.add("textTertiary", DarkColorTokens.TextTertiary, overwrite)
    return ThemeColors(initial)
}
