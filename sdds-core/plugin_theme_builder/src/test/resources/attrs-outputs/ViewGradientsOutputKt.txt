package com.sdds.playground.themebuilder.tokens.vs
import android.graphics.drawable.Drawable
import android.graphics.drawable.LayerDrawable
import android.graphics.drawable.shapes.RectShape
import android.graphics.drawable.shapes.Shape

/**
 * Описывает композитный градиент (может содержать несколько слоев градиентов)
 * @property layers слои градиентов [ViewGradientLayer]
 */
class ViewGradient(val layers: List<ViewGradientLayer>) {

    /**
     * Возвращает Drawable, к которому применены все градиенты [layers]
     */
    fun drawable(shape: Shape = RectShape()): Drawable =
        LayerDrawable(
            layers.map {
                shapeDrawableWithGradient(it)
                    .apply { setShape(shape) }
            }.toTypedArray()
        )
}
package com.sdds.playground.themebuilder.tokens.vs
import android.graphics.LinearGradient
import android.graphics.RadialGradient
import android.graphics.Shader
import android.graphics.SweepGradient
import kotlin.math.PI
import kotlin.math.abs
import kotlin.math.acos
import kotlin.math.cos
import kotlin.math.pow
import kotlin.math.sin
import kotlin.math.sqrt

/**
 * Описывает слой композитного градиента [ViewGradient].
 */
sealed class ViewGradientLayer {

    /**
     * Возвращает [Shader] для указанных [width] и [height]
     */
    abstract fun getShader(width: Float, height: Float): Shader

    data class Linear(
        val colors: IntArray,
        val positions: FloatArray,
        val angle: Float,
    ) : ViewGradientLayer() {

        private val normalizedAngle: Float = (angle % 360 + 360) % 360
        private val angleInRadians: Float = Math.toRadians(normalizedAngle.toDouble()).toFloat()

        override fun getShader(width: Float, height: Float): Shader {
            val (from, to) = getGradientCoordinates(Size(width, height))
            return LinearGradient(
                from.x,
                from.y,
                to.x,
                to.y,
                colors,
                positions,
                Shader.TileMode.CLAMP
            )
        }

        private fun getGradientCoordinates(size: Size): Pair<Offset, Offset> {
            val diagonal = sqrt(size.width.pow(2) + size.height.pow(2))
            val angleBetweenDiagonalAndWidth = acos(size.width / diagonal)
            val angleBetweenDiagonalAndGradientLine =
                if ((normalizedAngle.inExclusiveRange(
                        90f,
                        180f
                    )) || (normalizedAngle.inExclusiveRange(
                        270f,
                        360f
                    ))
                ) {
                    PI.toFloat() - angleInRadians - angleBetweenDiagonalAndWidth
                } else {
                    angleInRadians - angleBetweenDiagonalAndWidth
                }
            val halfGradientLine = abs(cos(angleBetweenDiagonalAndGradientLine) * diagonal) / 2

            val horizontalOffset = (halfGradientLine * cos(angleInRadians))
            val verticalOffset = (halfGradientLine * sin(angleInRadians))

            val start = size.center + Offset(-horizontalOffset, verticalOffset)
            val end = size.center + Offset(horizontalOffset, -verticalOffset)

            return start to end
        }

        private data class Size(
            val width: Float,
            val height: Float,
        ) {
            val center = Offset(width / 2f, height / 2f)
        }

        private data class Offset(
            val x: Float,
            val y: Float,
        ) {
            operator fun plus(other: Offset): Offset = Offset(x + other.x, y + other.y)
        }

        private companion object {

            fun Float.inExclusiveRange(from: Float, to: Float): Boolean {
                return this > from && this < to
            }
        }
    }

    data class Radial(
        val colors: IntArray,
        val positions: FloatArray,
        val radius: Float,
        val centerX: Float,
        val centerY: Float,
    ) : ViewGradientLayer() {
        override fun getShader(width: Float, height: Float): Shader {
            return RadialGradient(
                width * centerX,
                height * centerY,
                java.lang.Float.max(width, height) * radius / 2f,
                colors,
                positions,
                Shader.TileMode.CLAMP
            )
        }
    }

    data class Sweep(
        val colors: IntArray,
        val positions: FloatArray,
        val centerX: Float,
        val centerY: Float,
    ) : ViewGradientLayer() {
        override fun getShader(width: Float, height: Float): Shader {
            return SweepGradient(
                width * centerX,
                height * centerY,
                colors,
                positions,
            )
        }
    }

    data class SingleColor(val color: Int) : ViewGradientLayer() {
        override fun getShader(width: Float, height: Float): Shader {
            return LinearGradient(
                0f,
                0f,
                width,
                height,
                intArrayOf(color, color),
                floatArrayOf(0f, 1f),
                Shader.TileMode.CLAMP
            )
        }
    }
}
package com.sdds.playground.themebuilder.tokens.vs
import android.graphics.Shader
import android.graphics.drawable.ShapeDrawable

internal fun shapeDrawableWithGradient(gradient: ViewGradientLayer): ShapeDrawable =
    ShapeDrawable().apply {
        shaderFactory = object : ShapeDrawable.ShaderFactory() {
            override fun resize(width: Int, height: Int): Shader? {
                return if (width != 0 && height != 0) {
                    gradient.getShader(
                        width.toFloat(),
                        height.toFloat()
                    )
                }
                else null
            }
        }
    }
package com.sdds.playground.themebuilder.tokens.vs

import android.content.Context
import android.content.res.Configuration
import android.graphics.Color
import com.sdds.playground.themebuilder.tokens.vs.ThemeGradients
import com.sdds.playground.themebuilder.tokens.vs.ViewGradient
import com.sdds.playground.themebuilder.tokens.vs.ViewGradientLayer.Linear
import com.sdds.playground.themebuilder.tokens.vs.ViewGradientLayer.Radial
import com.sdds.playground.themebuilder.tokens.vs.ViewGradientLayer.SingleColor
import com.sdds.playground.themebuilder.tokens.vs.ViewGradientLayer.Sweep
import kotlin.Float
import kotlin.FloatArray
import kotlin.Int
import kotlin.IntArray

/**
 * Градиенты Theme.
 */
public data class ThemeGradients(
    public val textDefaultAccentGradient: ViewGradient,
    public val textDefaultGradientJoyActive: ViewGradient,
)

public val lightThemeGradients: ThemeGradients = ThemeGradients(
           textDefaultAccentGradient =
                ViewGradient(listOf(linearGradient(LightGradientTokens.TextDefaultAccentGradient.colors, LightGradientTokens.TextDefaultAccentGradient.positions, LightGradientTokens.TextDefaultAccentGradient.angle))),
                  textDefaultGradientJoyActive =
                ViewGradient(listOf(singleColor(LightGradientTokens.TextDefaultGradientJoyActive.Layer1.background),sweepGradient(LightGradientTokens.TextDefaultGradientJoyActive.Layer0.colors, LightGradientTokens.TextDefaultGradientJoyActive.Layer0.positions, LightGradientTokens.TextDefaultGradientJoyActive.Layer0.centerX, LightGradientTokens.TextDefaultGradientJoyActive.Layer0.centerY),linearGradient(LightGradientTokens.TextDefaultAccentGradient.colors, LightGradientTokens.TextDefaultAccentGradient.positions, LightGradientTokens.TextDefaultAccentGradient.angle)))
        )

public val darkThemeGradients: ThemeGradients = ThemeGradients(
           textDefaultAccentGradient =
                ViewGradient(listOf(radialGradient(DarkGradientTokens.TextDefaultAccentGradient.colors, DarkGradientTokens.TextDefaultAccentGradient.positions, DarkGradientTokens.TextDefaultAccentGradient.radius, DarkGradientTokens.TextDefaultAccentGradient.centerX, DarkGradientTokens.TextDefaultAccentGradient.centerY))),
                   textDefaultGradientJoyActive =
                ViewGradient(listOf(singleColor(LightGradientTokens.TextDefaultGradientJoyActive.Layer1.background),sweepGradient(LightGradientTokens.TextDefaultGradientJoyActive.Layer0.colors, LightGradientTokens.TextDefaultGradientJoyActive.Layer0.positions, LightGradientTokens.TextDefaultGradientJoyActive.Layer0.centerX, LightGradientTokens.TextDefaultGradientJoyActive.Layer0.centerY),linearGradient(LightGradientTokens.TextDefaultAccentGradient.colors, LightGradientTokens.TextDefaultAccentGradient.positions, LightGradientTokens.TextDefaultAccentGradient.angle)))
        )

internal fun linearGradient(
    colors: IntArray,
    positions: FloatArray,
    angle: Float,
): ViewGradientLayer.Linear = ViewGradientLayer.Linear(colors, positions, angle)

internal fun radialGradient(
    colors: IntArray,
    positions: FloatArray,
    radius: Float,
    centerX: Float,
    centerY: Float,
): ViewGradientLayer.Radial = ViewGradientLayer.Radial(colors, positions, radius, centerX, centerY)

internal fun sweepGradient(
    colors: IntArray,
    positions: FloatArray,
    centerX: Float,
    centerY: Float,
): ViewGradientLayer.Sweep = ViewGradientLayer.Sweep(colors, positions, centerX, centerY)

internal fun singleColor(color: Int): ViewGradientLayer.SingleColor =
        ViewGradientLayer.SingleColor(color)

/**
 * Возвращает объект [ViewGradients], который соответствует текущему режиму dark/light для данного
 * [context].
 */
public fun themeGradients(context: Context): ThemeGradients {
    val isDarkMode = context.resources.configuration.uiMode and
                Configuration.UI_MODE_NIGHT_MASK == Configuration.UI_MODE_NIGHT_YES
    return if (isDarkMode) darkThemeGradients else lightThemeGradients
}
