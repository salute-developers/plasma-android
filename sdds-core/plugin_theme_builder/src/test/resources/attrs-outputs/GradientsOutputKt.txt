// AUTO-GENERATED. DO NOT MODIFY this file.
package com.sdds.playground.themebuilder.theme

import androidx.compose.runtime.Composable
import androidx.compose.runtime.Immutable
import androidx.compose.runtime.ProvidableCompositionLocal
import androidx.compose.runtime.staticCompositionLocalOf
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.drawBehind
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.ShaderBrush
import com.sdds.compose.uikit.graphics.Gradients
import com.sdds.playground.themebuilder.theme.GradientOverrideScope
import com.sdds.playground.themebuilder.theme.ThemeGradients
import com.sdds.playground.themebuilder.tokens.DarkGradientTokens
import com.sdds.playground.themebuilder.tokens.LightGradientTokens
import kotlin.Float
import kotlin.FloatArray
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.Map
import kotlin.collections.MutableMap

/**
 * Градиенты Theme
 */
@Immutable
public class ThemeGradients(
    private val gradients: Map<String, List<ShaderBrush>>,
) {
    public val textDefaultAccentGradient: List<ShaderBrush> by gradients

    public val textDefaultGradientJoyActive: List<ShaderBrush> by gradients

    /**
     * Возвращает копию [ThemeGradients]. Предоставляет возможность переопределять градиенты.
     */
    public fun copy(overrideGradients: GradientOverrideScope.() -> Unit = {}): ThemeGradients {
        val gradientOverrideScope = GradientOverrideScope()
        overrideGradients.invoke(gradientOverrideScope)
        val overrideMap = gradientOverrideScope.overrideMap
        return ThemeGradients(gradients.mapValues { overrideMap[it.key] ?: it.value })
    }
}

/**
 * Скоуп переопределения градиентов
 */
public class GradientOverrideScope {
    private val _overrideMap: MutableMap<String, List<ShaderBrush>> = mutableMapOf()

    internal val overrideMap: Map<String, List<ShaderBrush>>
        get() = _overrideMap.toMap()

    public val textDefaultAccentGradient: String = "textDefaultAccentGradient"

    public val textDefaultGradientJoyActive: String = "textDefaultGradientJoyActive"

    /**
     * Переопределяет аттрибут градиента.
     */
    public infix fun String.overrideBy(gradient: List<ShaderBrush>): Unit {
        _overrideMap[this] = gradient
    }
}

internal val LocalThemeGradients: ProvidableCompositionLocal<ThemeGradients> =
        staticCompositionLocalOf {
            lightThemeGradients()
        }

private fun MutableMap<String, List<ShaderBrush>>.add(
    attribute: String,
    defaultTokenValue: List<ShaderBrush>,
    overwriteMap: Map<String, List<ShaderBrush>>,
): Unit {
    this[attribute] = overwriteMap[attribute] ?: defaultTokenValue
}

/**
 * Градиенты [ThemeGradients] для светлой темы
 */
@Suppress("LongMethod")
public fun lightThemeGradients(overrideGradients: GradientOverrideScope.() -> Unit = {}):
        ThemeGradients {
    val gradientOverrideScope = GradientOverrideScope()
    overrideGradients.invoke(gradientOverrideScope)
    val overwrite = gradientOverrideScope.overrideMap
    val initial = mutableMapOf<String, List<ShaderBrush>>()
    initial.add("textDefaultAccentGradient", listOf(linearGradient(
        LightGradientTokens.TextDefaultAccentGradient.colors,
        LightGradientTokens.TextDefaultAccentGradient.positions,
        LightGradientTokens.TextDefaultAccentGradient.angle,
    )), overwrite)
    initial.add("textDefaultGradientJoyActive", listOf(sweepGradient(
        LightGradientTokens.TextDefaultGradientJoyActive.colors,
        LightGradientTokens.TextDefaultGradientJoyActive.positions,
        LightGradientTokens.TextDefaultGradientJoyActive.centerX,
        LightGradientTokens.TextDefaultGradientJoyActive.centerY,
    )), overwrite)
    return ThemeGradients(initial)
}

/**
 * Градиенты [ThemeGradients] для темной темы
 */
@Suppress("LongMethod")
public fun darkThemeGradients(overrideGradients: GradientOverrideScope.() -> Unit = {}):
        ThemeGradients {
    val gradientOverrideScope = GradientOverrideScope()
    overrideGradients.invoke(gradientOverrideScope)
    val overwrite = gradientOverrideScope.overrideMap
    val initial = mutableMapOf<String, List<ShaderBrush>>()
    initial.add("textDefaultAccentGradient", listOf(radialGradient(
        DarkGradientTokens.TextDefaultAccentGradient.colors,
        DarkGradientTokens.TextDefaultAccentGradient.positions,
        DarkGradientTokens.TextDefaultAccentGradient.radius,
        DarkGradientTokens.TextDefaultAccentGradient.centerX,
        DarkGradientTokens.TextDefaultAccentGradient.centerY,
    )), overwrite)
    initial.add("textDefaultGradientJoyActive", listOf(sweepGradient(
        LightGradientTokens.TextDefaultGradientJoyActive.colors,
        LightGradientTokens.TextDefaultGradientJoyActive.positions,
        LightGradientTokens.TextDefaultGradientJoyActive.centerX,
        LightGradientTokens.TextDefaultGradientJoyActive.centerY,
    )), overwrite)
    return ThemeGradients(initial)
}

internal fun linearGradient(
    colors: List<Color>,
    positions: FloatArray,
    angle: Float = 0f,
    startPoint: Offset? = null,
    endPoint: Offset? = null,
): ShaderBrush = Gradients.Linear(colors, positions.toList(), angle, startPoint, endPoint)

internal fun radialGradient(
    colors: List<Color>,
    positions: FloatArray,
    radius: Float,
    centerX: Float,
    centerY: Float,
): ShaderBrush = Gradients.Radial(colors, positions.toList(), radius, centerX, centerY)

internal fun sweepGradient(
    colors: List<Color>,
    positions: FloatArray,
    centerX: Float,
    centerY: Float,
): ShaderBrush = Gradients.Sweep(colors, positions.toList(), centerX, centerY)

internal fun singleColor(color: Color): ShaderBrush = Gradients.Linear(listOf(color, color),
        listOf(0f, 1f))

/**
 * Модификатор, позволяющий применить композитный градиент.
 */
@Composable
public fun Modifier.compositeGradient(brushes: List<Brush>): Modifier = this then
        Modifier.drawBehind { brushes.forEach(::drawRect) }
