// AUTO-GENERATED. DO NOT MODIFY this file.
package com.sdds.playground.themebuilder.theme

import androidx.compose.foundation.text.selection.LocalTextSelectionColors
import androidx.compose.foundation.text.selection.TextSelectionColors
import androidx.compose.runtime.Composable
import androidx.compose.runtime.CompositionLocal
import androidx.compose.runtime.CompositionLocalProvider
import androidx.compose.runtime.ReadOnlyComposable
import androidx.compose.runtime.remember
import com.sdds.compose.uikit.ProvideTextStyle
import com.sdds.playground.themebuilder.theme.TestColors
import com.sdds.playground.themebuilder.theme.TestGradients
import com.sdds.playground.themebuilder.theme.TestShadows
import com.sdds.playground.themebuilder.theme.TestShapes
import com.sdds.playground.themebuilder.theme.TestSpacing
import com.sdds.playground.themebuilder.theme.TestTypography
import kotlin.Unit

public object TestTheme {
    public val colors: TestColors
        @Composable
        @ReadOnlyComposable
        get() = LocalTestColors.current

    public val gradients: TestGradients
        @Composable
        @ReadOnlyComposable
        get() = LocalTestGradients.current

    public val shapes: TestShapes
        @Composable
        @ReadOnlyComposable
        get() = LocalTestShapes.current

    public val shadows: TestShadows
        @Composable
        @ReadOnlyComposable
        get() = LocalTestShadows.current

    public val spacing: TestSpacing
        @Composable
        @ReadOnlyComposable
        get() = LocalTestSpacing.current

    public val typography: TestTypography
        @Composable
        @ReadOnlyComposable
        get() = LocalTestTypography.current
}

/**
 * Базовая тема Test
 */
@Composable
public fun TestTheme(
    colors: TestColors = TestTheme.colors,
    gradients: TestGradients = TestTheme.gradients,
    shapes: TestShapes = defaultTestShapes(),
    shadows: TestShadows = defaultTestShadows(),
    typography: TestTypography = dynamicTestTypography(),
    spacing: TestSpacing = defaultTestSpacing(),
    content: @Composable () -> Unit,
): Unit {
    val rememberColors = remember { colors.copy() }.apply { updateColorsFrom(colors) }

    val textSelectionColors = remember { TextSelectionColors(handleColor =
            rememberColors.textDefaultAccent, backgroundColor =
            rememberColors.textDefaultAccent.copy(0.3f)) }

    CompositionLocalProvider(
        LocalTestColors provides rememberColors,
        LocalTestGradients provides gradients,
        LocalTestTypography provides typography,
        LocalTestShapes provides shapes,
        LocalTestShadows provides shadows,
        LocalTestSpacing provides spacing,
        LocalTextSelectionColors provides textSelectionColors,
        content = { ProvideTextStyle(value = typography.bodyMNormal.copy(color =
            rememberColors.textPrimary), content = content,) },
    )
}
